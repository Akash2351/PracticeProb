//**********************************************************************************//
02/13/18
Q1) Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot
unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its
index, otherwise return -1.You may assume no duplicate exists in the array.
-> Do it in O(logn) - > use binary search..

    public int search(int[] nums, int target) {
        if(nums==null || nums.length ==0)
            return -1;

        int low = 0, high = nums.length-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(target == nums[mid])return mid;

            // the array is in proper order...sorted...check if no is in range
            //if yes, set the lower and upper bounds...
            if(nums[low]<=nums[mid]){  //4 5 6 7 0 1 2
                if(target>=nums[low] && target <nums[mid])
                    high = mid-1;
                else
                    low = mid+1;
            }

            if(nums[mid] <= nums[high]){  //4 5 6 0 1 2 3
                if(target>nums[mid] && target <= nums[high])
                    low = mid+1;
                else
                    high = mid-1;
            }
        }
        return -1;
    }

//**********************************************************************************//
02/13/18
Q2) Integer to Roman

    //Given an integer, convert it to a roman numeral.
    //Input is guaranteed to be within the range from 1 to 3999.
    public String intToRoman(int num) {

        //X->10, L->50, C->100,D->500, M->1000

        String[] ones = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        String[] tens = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        String[] hundreds = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        String[] thousands = {"","M","MM","MMM"};


        int one = num%10;
        int ten = (num%100)/10;
        int hundred = (num%1000)/100;
        int thousand = num/1000;

        //System.out.printf("%d %d %d %d",one,ten,hundred,thousand);
        return thousands[thousand]+hundreds[hundred]+tens[ten]+ones[one];
    }

//**********************************************************************************//
02/14/18
Q3) Flatten nested iterator

/*Given a nested list of integers, implement an iterator to flatten it.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.
 Example 1:   Given the list [[1,1],2,[1,1]],
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].
 Example 2:    Given the list [1,[4,[6]]],
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].*/

  // This is the interface that allows for creating nested lists.
  // You should not implement it, or speculate about its implementation
  interface NestedInteger {

      // @return true if this NestedInteger holds a single integer, rather than a nested list.
      public boolean isInteger();

      // @return the single integer that this NestedInteger holds, if it holds a single integer
      // Return null if this NestedInteger holds a nested list
      public Integer getInteger();
      // @return the nested list that this NestedInteger holds, if it holds a nested list
      // Return null if this NestedInteger holds a single integer
      public List<NestedInteger> getList();
  }

public class FlattenNestedIterator implements Iterator<Integer> {
    List<Integer> list = new ArrayList<>();
    int size =0;


    public FlattenNestedIterator(List<NestedInteger> nestedList) {
        addRecursively(nestedList,list);
        size = list.size();
        //returning from the end...so reverse the list
        Collections.reverse(list);
    }

    public void addRecursively(List<NestedInteger> nestedList, List<Integer> list){
        for(NestedInteger nInt: nestedList){
            if(nInt.isInteger()){
                list.add(nInt.getInteger());
            } else {
                addRecursively(nInt.getList(), list);
            }
        }
    }
    @Override
    public Integer next() {
        if(size > 0)
            return list.remove(--size);
        return null;
    }
    @Override
    public boolean hasNext() {
        if(size>0)return true;
        return false;
    }
}

//**********************************************************************************//
02/14/18
Q4) Unique Paths


/*    A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
    The robot can only move either down or right at any point in time.
    The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
    How many possible unique paths are there?  */

    public static int uniquePaths(int m, int n) {
        if(m==0 || n==0) return 0;

        int[][] table = new int[m][n];
        int rowLen = table.length, colLen = table[0].length;

        //initialize first row and column to 1's...only 1 way of going
        for(int i=0; i<rowLen; i++){
            table[i][0] = 1;
        }
        for(int i=0; i<colLen; i++){
            table[0][i] = 1;
        }

        //for any other entry, take the previous top and left  values and add them..
        //this gives all combinations for that particular cell.
        for(int i=1; i<rowLen; i++){
            for(int j=1; j<colLen;j++){
                table[i][j]=table[i-1][j]+table[i][j-1];
            }
        }
        return table[m-1][n-1];
    }

//**********************************************************************************//
02/14/18
Q5) Trim BST

//Given a binary search tree and the lowest and highest boundaries
// as L and R, trim the tree so that all its elements lies in [L, R] (R >= L).
// You might need to change the root of the tree, so the result should
// return the new root of the trimmed binary search tree.

/*Input:
           3
         /  \
        0   4
         \
          2
        /
      1
        L = 1
        R = 3
        Output:
            3
           /
          2
        /
       1 */

public class TrimBST {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if(root==null)
            return root;

        //if node is within range, call recursively..for left and right
        if(root.val>=L && root.val<=R){
            root.left = trimBST(root.left,L,R);
            root.right = trimBST(root.right,L,R);
            return root;
        }
        //if node not within range, call its left or right child accordingly
        else if(root.val < L){
            return trimBST(root.right,L,R);
        } else {
            return trimBST(root.left, L,R);
        }
    }
}

//**********************************************************************************//
02/15/18
Q6) Friend circles

/*There are N students in a class. Some of them are friends, while some are not.
    Their friendship is transitive in nature. For example, if A is a direct
    friend of B, and B is a direct friend of C, then A is an indirect friend of C.
    And we defined a friend circle is a group of students who are direct or indirect friends.
Given a N*N matrix M representing the friend relationship between students in the class.
    If M[i][j] = 1, then the ith and jth students are direct friends with each other,
    otherwise not. And you have to output the total number of friend
    circles among all the students.

   Input:
   [[1,1,0],
   [1,1,0],
   [0,0,1]]
    Output: 2  */

    public int findCircleNum(int[][] M) {
        int circleCount = 0;
        int rowLen = M.length;

        //same like island count...use dfs to recursively find friends
        // and make their entry 0.
        for(int i=0;i<rowLen; i++)
            for(int j=0; j<rowLen; j++){
                if(M[i][j] == 1){
                    dfs(M,i,j);
                    circleCount++;
                }
            }

        return circleCount;
    }

    public void dfs(int[][] M, int i, int j){
        if(M[i][j] == 0) return;
        M[i][j] = 0;

        //make all friends of i and j 0's recursively
        for(int k=0; k<M.length; k++){
            if(M[i][k] == 1) dfs(M, i,k);
            if(M[k][i] == 1) dfs(M, k,i);
            if(M[j][k] == 1) dfs(M, j,k);
            if(M[k][j] == 1) dfs(M, k,j);
        }
    }

//**********************************************************************************//
02/15/18
Q7) House Robber 3

/*The thief has found himself a new place for his thievery again.
    There is only one entrance to this area, called the "root." Besides
    the root, each house has one and only one parent house. After a tour,
    the smart thief realized that "all houses in this place forms a binary tree".
    It will automatically contact the police if two directly-linked houses were
    broken into on the same night.

Determine the maximum amount of money the thief can rob tonight
    without alerting the police.

                  3
                 / \
                4   5
               / \   \
              1   3   1
 Maximum amount of money the thief can rob = 4 + 5 = 9.*/

    public int rob(TreeNode root){
        if(root== null) return 0;

        if(root.left == null && root.right==null)
            return root.val;

        //consider the rob case...
        //rob = root + left child's grandchildren + right child's grandchildren
        int rob = root.val;
        int grandChildLeft = 0, grandChildRight = 0;
        if(root.left!=null)
            grandChildLeft = rob(root.left.left) + rob(root.left.right);
        if(root.right!=null)
            grandChildRight = rob(root.right.left) + rob(root.right.right);

        rob += grandChildLeft + grandChildRight;

        //consider not rob case...
        //not rob = left child + right child called recursively
        int notRob = rob(root.left) + rob(root.right);

        return Math.max(rob, notRob);
    }