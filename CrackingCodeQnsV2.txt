
//**********************************************************************************//
10/23/17
Q1) Add the two numbers and return it as a linked list.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            ListNode head = new ListNode(0);
            ListNode prev = head;
            int carry = 0;

            while (l1 != null || l2 != null || carry != 0) {
                ListNode cur = new ListNode(0);
                if (l1 != null) {
                    cur.val += l1.val;
                    l1 = l1.next;
                }

                if (l2 != null) {
                    cur.val += l2.val;
                    l2 = l2.next;
                }

                cur.val += carry;
                //cur node val = l1.val + l2.val + carry...
                //calculate carry... 13 -> carry 1
                carry = cur.val / 10;
                cur.val = cur.val % 10;
                prev.next = cur;
                prev = cur;
            }
            return head.next;
        }

//**********************************************************************************//
10/18/17
Q2) Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]

    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list = new ArrayList<>();
        if (s == null) return list;
        int strLen = s.length();
        int pLen = p.length();
        //sliding window... slide for pattern length each iteration
        for (int i = 0; i < strLen; i++) {
            if (i + pLen > strLen) break;
            if (isAnagram(s.substring(i, i + pLen), p))
                list.add(i);
        }
        return list;
    }

    //function to check if two strings are anagrams or not...
    boolean isAnagram(String s1, String s2) {
        // count the chars in first string and verify with second
        int dict[] = new int[26];
        if (s1 == null || s2 == null || s1.length() != s2.length()) return false;

        for (char c : s1.toCharArray()) {
            dict[c - 'a']++;
        }
        for (char c : s2.toCharArray()) {
            dict[c - 'a']--;
            if (dict[c - 'a'] < 0) return false;
        }
        return true;
    }

//**********************************************************************************//
10/18/17
Q3) Find All Numbers Disappeared in an Array
Input:
[4,3,2,7,8,2,3,1]
Output:
[5,6]

    List<Integer> list = new ArrayList<>();
        if(nums == null || nums.length == 1)
            return list;
        //nums[nums[i] -1] = -nums[nums[i]];
        // the nos in the given array range from 1 to n...so indices are -l less...0 to n-1
        // for every no found, mark it negative in the same array for indices...
        for(int i=0; i< nums.length; i++){
            int index = (int)Math.abs(nums[i]) -1;
            if(nums[index]>0){
                nums[index] = - nums[index];
            }
        }
        //see if any no is positive...that means, it was not visited first...that is a missing no
        for(int i=0; i< nums.length; i++){
            if(nums[i]>0)
                list.add(i+1);
        }
        return list;
    }

//**********************************************************************************//
10/24/17
Q4) Given a string, find the length of the longest substring without repeating characters
Given "abcabcbb", the answer is "abc", which the length is 3.
Given "bbbbb", the answer is "b", with the length of 1

    public static int lengthOfLongestSubstring(String s) {
        int start = 0, max = 0;
        //store each char in map, with its occurence
        HashMap<Character, Integer> map = new HashMap<>();
        char c = 0; //dummy value
        int len = s.length();

        for (int i = 0; i < len; i++) {
            c = s.charAt(i);
            if (map.containsKey(c) && map.get(c) >= start) {
                //if the character is present in map, then that char is repeated..
                // reset the start pointer if its value is greater than current start.
                //check case abba...
                start = map.get(c) + 1;
            }
            map.put(c, i);
            max = (int) Math.max(max, i - start + 1);
        }
        return max;
    }

//**********************************************************************************//
10/24/17
Q5) Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses

    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        generateRecursive("",n,n,list);
        return list;
    }

    public void generateRecursive(String cur, int leftRemaining, int rightRemaining, List<String> list){
        if(leftRemaining == 0 && rightRemaining == 0){
            list.add(cur);
            return;
        }

        if(leftRemaining > 0){
            generateRecursive(cur+"(",leftRemaining-1, rightRemaining, list);
            //possible combinations when left < right...valid case
            if(leftRemaining < rightRemaining){
                generateRecursive(cur+")", leftRemaining, rightRemaining-1, list);
            }
        } else {
            generateRecursive(cur+")", leftRemaining, rightRemaining-1, list);
        }
    }

//**********************************************************************************//
10/26/17
Q6) Find the longest palindromic substring in the given string...
    static int low,curMax;
    public static  String longestPalindrome(String s) {
        int len = s.length();
        if(s == null|| s.isEmpty())
            return null;
        if(s.length()==1)
            return s;
        for(int i=0; i<len; i++){
            extendPalindrome(s,i,i); //check for odd palindromes starting from i
            extendPalindrome(s,i,i+1); // check for even palindromes
        }
        return s.substring(low, low+curMax);
    }

    //extend palindrome around its centre...
    static void extendPalindrome(String s, int left, int right){
        while(left>=0 && right<s.length() && s.charAt(left)==s.charAt(right)){
            left--;
            right++;
        }
        //range of current palindrome = left+1, right-1..
        //diff = (right -1) - left
        if(curMax < right-left-1){
            low = left+1;
            curMax = right-left-1;
        }
    }
//**********************************************************************************//
10/26/17
Q7) Merge two trees...

    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if(t1==null && t2==null)
            return null;

        int val = (t1==null? 0 : t1.val) + (t2==null? 0 : t2.val);
        TreeNode newNode =  new TreeNode(val);
        newNode.left = mergeTrees(t1==null? null:t1.left, t2==null?null:t2.left);
        newNode.right = mergeTrees(t1==null? null:t1.right, t2==null?null:t2.right);

        return newNode;
    }

//**********************************************************************************//
10/27/17
Q8) 3 Sum: Given an array S of n integers, are there elements a, b, c in S such
that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

    public List<List<Integer>> threeSum(int[] nums) {
        ArrayList<List<Integer>> list = new ArrayList<>();
        //sort the elements, pick element at once,
        //have 2 pointers -> run from both ends... compare the sum with target and
        // manipulate the left and right pointers.
        Arrays.sort(nums);
        int len = nums.length;
        int target=0;

        for(int i=0;i<len;i++){
            //eliminate duplicates by comparing adjacent elements.
            if( i==0 || nums[i]!=nums[i-1]){
                int left=i+1,right=len-1;
                while( left<right){
                    int tempSum = nums[i] +nums[left] + nums[right];
                    if( tempSum == target){
                        list.add(new ArrayList<>(Arrays.asList(nums[i],nums[left],nums[right])));
                        left++; right--;
                        //skip duplicate elements...
                        while(left<right && nums[left]==nums[left-1])left++;
                        while(left<right && nums[right]==nums[right+1])right--;
                    } else if(tempSum <target){
                        //num array is sorted...so moving right will increase sum..
                        left++;
                    } else {
                        right--;
                    }
                } //while end
            }
        }
        return list;
    }

//**********************************************************************************//
10/27/17
Q9) container with most water... given array with heights at location i, find maximum
  area of the container...

    public static int maxArea(int[] height) {
        int max=0, left=0, right=height.length-1;

        if(height==null || height.length <2)
            return max;
        //traverse from outermost container, moving left or right wall accordingly
        while(left<right){
            //area = width * height..
            max = Math.max(max, (right-left)*Math.min(height[left],height[right]));
            if(height[left]<height[right])
                left++;
            else
                right--;
        }
        return max;
    }

//**********************************************************************************//
10/28/17
Q10) Given a linked list, remove the nth node from the end of list and return its head.
    //two pass - > first pass cal length of list..second pass, at nth position, remove
    //node value and connect.

    //one pass algorithm.. using 2 pointers, which are n nodes apart.
    // advance the first pointer to n positions first
    //keep advancing second pointer until first becomes null. now
    //second will be at nth node from the end.
    public ListNode removeNthFromEnd(ListNode head, int n) {
        //create a dummy node to handle first node removal easy.
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode first = dummy;
        ListNode second = dummy;
        // Advances first pointer so that the gap between first and second is n nodes apart
        for (int i = 0; i < n + 1; i++) {
            first = first.next;
        }
        // Move first to the end, maintaining the gap
        //when second moves to nth position from end, first will be null.
        while (first != null) {
            first = first.next;
            second = second.next;
        }
        second.next = second.next.next;
        return dummy.next;
    }

//**********************************************************************************//
10/29/17
Q11) Find the majority element in a array.
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();

        int len =  nums.length / 2;
        int maj = 0;
        for(int num: nums){
            int count =1;
            if(!map.containsKey(num)){
                map.put(num,count);
            } else {
                count = map.get(num) + 1;
                map.put(num,count);
            }

            if(count>len )
            {
                return num;
            }
        }

        return maj;
    }
//**********************************************************************************//
10/31/17
Q12) Merge sort
    void mergeSort(int ary[], int low, int high){
        if(low<high){
            int mid = (low+high)/2;
            mergeSort(ary,low,mid);
            mergeSort(ary,mid+1,high);
            merge(ary, low, mid, high);
        }
    }

    void merge(int []ary, int low, int mid, int high){
        int i=low, j=mid+1,k=low;
        int temp[] = new int[high+1];

        for(int idx=low; idx<=high; idx++){
            temp[idx] = ary[idx];
        }
        while(i<=mid && j<=high){
            if(temp[i]<=temp[j]){
                ary[k++] = temp[i++];
            } else {
                ary[k++] = temp[j++];
            }
        }
        while(i<=mid){
            ary[k++] = temp[i++];
        }
    }

//**********************************************************************************//
10/31/17
Q13) Letter Combinations of a Phone Number
  given "23", will print ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]

    public List<String> letterCombinations(String digits) {
        //store the key combinations in a map
        HashMap<String,String> map = new HashMap<>();
        map.put("1","");
        map.put("2","abc");
        map.put("3","def");map.put("4","ghi");map.put("5","jkl");map.put("6","mno");
        map.put("7","pqrs");map.put("8","tuv");map.put("9","wxyz");map.put("0","");

        //for storing the strings..
        List<String> list = new ArrayList<String>();
        if(digits==null||digits.isEmpty())
            return list;

        printRecursive(digits, 0, map,"",list);
        return list;
    }

    //recursive program that appends all possible combinations of a key, calls the function
    //recursively.  eg "23" -> "a_","b_","c_" in first loop, "ad","ae","af"...etc
    public void printRecursive(String digits, int index, HashMap<String,String> map,
                               String comb, List<String> list){
        //base case..
        if(index == digits.length()){
            list.add(comb);
            return;
        }
        String chars = map.get(String.valueOf(digits.charAt(index)));
        if(chars.length()==0) //check for 0 and 1..
            return;
        //else append and recursively call..abc
        for(int i=0; i<chars.length();i++){
            printRecursive(digits, index+1,map, comb+chars.charAt(i),list);
        }
    }

//**********************************************************************************//
10/31/17
Q14) Combination sum
   given [2, 3, 6, 7] and target 7, output is  [7], [2, 2, 3]

    public List<List<Integer>> combinationSum(int[] candidates, int target)  {
        //for storing the list..
        List<List<Integer>> list = new ArrayList<>();
        if (candidates == null || candidates.length==0)
            return list;
        //for storing the temp list
        List<Integer> curList = new ArrayList<>();
        printRecursive(candidates, 0, target, curList, list);
        return list;
    }

    public void printRecursive(int[] candidates, int index, int target,
                               List<Integer> curList, List<List<Integer>> list) {
        //base case..
        if (target == 0) {
            //just adding curList, it will be empty in the end...so making a new copy
            list.add(new ArrayList<>(curList));
        } else
            if(target>0){
            // if starting from i =0, it will give all combinations...
            // if input is [2, 3, 6, 7], we get [2, 2, 3],[2, 3, 2], [3,2,2] with i=0
            // else, it gives only [2, 2, 3]
            for(int i=index;i<candidates.length && target >= candidates[i];i++){
                    curList.add(candidates[i]);
                    printRecursive(candidates,i,target-candidates[i],curList,list);
                    curList.remove(curList.size()-1);
            }
        }
    }

//**********************************************************************************//
11/3/17
Q15) Permutations (Given a collection of distinct numbers, return all possible permutations)

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        if (nums == null)
            return list;
        else if (nums.length == 1) {
            list.add(Arrays.asList(nums[0]));
            return list;
        }

        getPermutations(nums, nums.length, new ArrayList<Integer>(), list);
        return list;
    }

    void getPermutations(int[] nums, int curLen, List<Integer> cur, List<List<Integer>> list) {
        if (curLen == 0) {
            list.add(new ArrayList(cur));
        } else if (curLen > 0) {
            for (int num : nums) {
                if (!cur.contains(num)) {
                    cur.add(num);
                    getPermutations(nums, curLen - 1, cur, list);
                    cur.remove(cur.size() - 1);
                }
            }
        }
    }

//**********************************************************************************//
11/3/17
Q16) You are given an n x n 2D matrix representing an image.
     Rotate the image by 90 degrees (clockwise).

    /*The idea was firstly transpose the matrix and then flip it symmetrically. For instance,
        1  2  3
        4  5  6
        7  8  9
    after transpose, it will be swap(matrix[i][j], matrix[j][i])
        1  4  7
        2  5  8
        3  6  9
    Then flip the matrix horizontally. (swap(matrix[i][j], matrix[i][matrix.length-1-j])
        7  4  1
        8  5  2
        9  6  3*/

    public void rotate(int[][] matrix) {
        int len = matrix.length;
        // first transpose the matrix...
        for(int i=0; i<len;i++){
            for(int j=i; j<len;j++){   //note j starts from i..not 0..
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        //flip the elements in same row...around its centre...Reverse.
        for(int i=0; i<len;i++){
            for(int j=0; j<len/2;j++){   // j until len/2...like reverse
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][len-1-j];
                matrix[i][len-1-j] = temp;
            }
        }
    }

//**********************************************************************************//
11/3/17
Q17) Hamming distance: The Hamming distance between two integers is the number
        of positions at which the corresponding bits are different.
        Input: x = 1, y = 4
        Output: 2
        Explanation:
        1   (0 0 0 1)
        4   (0 1 0 0)
               ↑   ↑

    public static int hammingDistance(int x, int y) {
        //xor to get the no formed with different bits.
        int xor = x ^ y, count = 0;
        // 1 ^ 4 => 5..find the no of ones in 5...
        while(xor!=0){
            if((xor & 1) == 1)
                count++;
            xor = xor >> 1;
        }
        return count;
    }

//**********************************************************************************//
11/7/17
Q18) sort a linked list in o(nlogn) with constant space

    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null)
            return head;

        //split the list in 2 halves...fast moves twice the speed.
        ListNode slow = head, fast = head, prev = null;
        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        // break first list at prev..second list starts from slow.
        prev.next = null;

        //sort the lists recursively
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow);

        return merge(l1, l2);
    }

    ListNode merge(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0), p = head;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                p.next = l1;
                l1 = l1.next;
            } else {
                p.next = l2;
                l2 = l2.next;
            }
            p = p.next;
        }

        if (l1 == null)
            p.next = l2;
        if (l2 == null)
            p.next = l1;

        return head.next;
    }

//**********************************************************************************//
11/7/17
Q19) Given a string, your task is to count how many palindromic substrings in this string.
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

    //same like print all palindromic substring...
    //expand around its centre....
    public int countSubstrings(String s) {
        if(s==null)
            return 0;
        if(s.length() ==1)
            return 1;

        int count = 0;
        for(int i=0;i<s.length();i++){
            count += extendPalindrome(s,i,i);
            count += extendPalindrome(s,i,i+1);
        }
        return count;
    }

    int extendPalindrome(String s, int left, int right){
        int len = s.length(),count=0;
        while(left>=0 && right<len && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
            count++;
        }
        return count;
    }

//**********************************************************************************//
11/7/17
Q20) You are given a binary tree in which each node contains an integer value.
     Find the number of paths that sum to a given value.
eg) root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:
1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

    public int pathSum(TreeNode root, int sum) {
        if (root == null)
            return 0;

        //call recursively and find for other child nodes...
        return findPath(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);

        //if checking from only root node, then
        //return findPath(root, sum);
    }

    //returns the number of paths to a given sum, starting from node root...
    int findPath(TreeNode root, int sum) {
        if (root == null)
            return 0;

        int count = 0;
        sum = sum - root.val;
        if (sum == 0)
            count++;
        count += findPath(root.left, sum);
        count += findPath(root.right, sum);

        return count;
    }

//**********************************************************************************//
11/8/17
Q21) Given a non-empty array containing only positive integers, find if the array
can be partitioned into two subsets such that the sum of elements in both subsets is equal.
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

    public boolean canPartition(int[] nums) {
        if(nums.length ==1)
            return false;

        int sum =0;
        for(int num: nums)
            sum+=num;

        //if sum is not even, return false,it cannot be divided
        if(sum%2!=0)
            return false;

        sum = sum/2;
        boolean table[] = new boolean[sum+1];
        Arrays.fill(table, false);
        table[0] = true;

        for(int i=0; i<nums.length; i++){
            for(int j=sum; j>0; j--){  //same like coin change, but do from top and decrement
                if(nums[i] <= j)
                    table[j] = table[j] || table[j-nums[i]];
            }
        }
        return table[sum];
    }

//**********************************************************************************//
11/8/17
Q22) Given a non-empty array of integers, return the k most frequent elements.
     For example,    Given [1,1,1,2,2,3] and k = 2, return [1,2].

    public static List<Integer> topKFrequent(int[] nums, int k) {

        //get the frequency count...
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int num: nums){
            map.put(num, map.getOrDefault(num,0)+1);
        }

        //use a bucket, with count as index...and store the nos...
        List[] bucket = new List[nums.length+1];
        for(Integer no: map.keySet()){
            Integer count = map.get(no);
            if(bucket[count] == null)
                bucket[count] = new ArrayList<>();

            bucket[count].add(no);
        }

        //keep adding results from the max count bucket until k elements are added..
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=nums.length; i>0 && res.size()<k; i--){
            if(bucket[i]!=null){
                res.addAll(bucket[i]);
            }
        }
        return res;
    }

//**********************************************************************************//
11/8/17
Q23) Given a binary tree, you need to compute the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any
two nodes in a tree. This path may or may not pass through the root

    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        getHeight(root); //returns height of tree...we dont need that.
        return max;
        //Note: finding left tree height + right tree height + links to parent
        //will not always work...sometimes right/left child only may have the longest path
    }

    //calculate height of tree...meanwhile check for max height btw left and right child.
    int getHeight(TreeNode root){
        if(root == null)
            return 0;
        int left =  getHeight(root.left);
        int right = getHeight(root.right);

        //For every node, length of longest path which passes it
        // is  MaxDepth of its left subtree + MaxDepth of its right subtree.
        max = Math.max(max,left+right);

        return 1+ Math.max(left,right);
    }

//**********************************************************************************//
11/9/17
Q24) Given an array of n integers where n > 1, nums, return an array output such that
output[i] is equal to the product of all the elements of nums except nums[i].
For example, given [1,2,3,4], return [24,12,8,6].

     //1) Construct a temporary array left[] such that left[i] contains product
     // of all elements on left of arr[i] excluding arr[i].
     //2) Construct another temporary array right[] such that right[i] contains
     // product of all elements on on right of arr[i] excluding arr[i].
     //3) To get prod[], multiply left[] and right[].
    public static int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] left = new int[len];
        int[] right = new int[len];
        int[] result = new int[len];

        left[0]=1;
        right[len-1] =1;

        for(int i=0;i<len-1;i++){
            left[i+1] = left[i] * nums[i];
            // left[1] = product of nums until left[2].
            //i.e left[1] = 1* nums[0].
        }

        for(int i=len-1; i>0;i--){
            right[i-1] = right[i] * nums[i];
        }

        for(int i=0;i<len;i++){
            result[i] = left[i] * right[i];
        }
        return result;
    }

//**********************************************************************************//
11/9/17
Q25) Given a non negative integer number num. For every numbers i in the range
0 ≤ i ≤ num calculate the number of 1's in their binary representation
and return them as an array.
For num = 5 you should return [0,1,1,2,1,2].

    public int[] countBits(int num) {
        int[] res = new int[num + 1];
        res[0] = 0;
        /*note  the sequence
        0 -> 0000   -> 0
        1 -> 0001   -> 1  (0 +1%2)
        2 -> 0010   -> 1  (1 +2%2)
        3 -> 0011   -> 2  (1 +3%2)
        4 -> 0100   -> 1  (1 +4%2)
        5 -> 0101   -> 1  (1 +5%2)
            res[i] = res[i / 2] + i % 2;
        */

        for (int i = 1; i <= num; i++) {
            res[i] = res[i / 2] + i % 2;
        }
        return res;
    }

//**********************************************************************************//
11/9/17
Q26) Given an array nums, write a function to move all 0's to the end of it
 while maintaining the relative order of the non-zero elements.
 For example, given nums = [0, 1, 0, 3, 12], after calling your function,
 nums should be [1, 3, 12, 0, 0].

    public static void moveZeroes(int[] nums) {
        int len = nums.length;
        int j=0;
        //index j will hold only non zero nums,
        //starting from the beginning...
        //keep swapping filling nums at j index...
        for(int i=0; i<len; i++){
            if(nums[i]!=0){
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
                j++;
            }
        }

        //brute force way - double loop...
        /*int len = nums.length;
        for(int i=0; i<len;i++){
            if(nums[i]==0){
                for(int j=i+1; j<len;j++){
                    if(nums[j]!=0){
                        nums[i] = nums[j];
                        nums[j] = 0;
                        break;
                    }
                }
            }
        }*/
    }

//**********************************************************************************//
11/10/17
Q27) Shortest Unsorted Continuous Subarray
 Given an integer array, you need to find one continuous subarray that if you only sort
 this subarray in ascending order, then the whole array will be sorted in ascending order, too.
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9].


    public int findUnsortedSubarray(int[] nums) {

        //sort the list and comparing the difference elements index
        //from both ends...
        int[] sorted = nums.clone();
        Arrays.sort(sorted);

        int left=0;
        while(left<nums.length && nums[left] == sorted[left])left++;

        int right = nums.length-1;
        while(right>left && nums[right]== sorted[right])right--;

        return right-left+1;
